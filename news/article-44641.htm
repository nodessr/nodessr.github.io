<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nodessr.github.io/news/article-44641.htm" />
    <title>pandas的apply函数常见用法总结</title>
        <meta name="description" content="pandas的apply函数通常用于一些复杂的遍历操作（遍历可迭代对象的同时执行一些自定义函数），它的可定制程度高，而且比itterrows、for等操作效率更高，是我非常喜欢而且常用的一个函数。ap" />
        <link rel="icon" href="/assets/website/img/nodessr/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Node SSR节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nodessr.github.io/news/article-44641.htm" />
    <meta property="og:site_name" content="Node SSR节点订阅官网" />
    <meta property="og:title" content="pandas的apply函数常见用法总结" />
    <meta property="og:image" content="https://nodessr.github.io/uploads/20240819-1/235c4d3379d84c3ebdf2e4f38029119a.webp" />
        <meta property="og:release_date" content="2025-01-22T10:14:27" />
    <meta property="og:updated_time" content="2025-01-22T10:14:27" />
        <meta property="og:description" content="pandas的apply函数通常用于一些复杂的遍历操作（遍历可迭代对象的同时执行一些自定义函数），它的可定制程度高，而且比itterrows、for等操作效率更高，是我非常喜欢而且常用的一个函数。ap" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="pandas的apply函数常见用法总结">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://stackpath.bootstrapcdn.com">

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodessr/animate.css">
    <link rel="stylesheet" href="/assets/website/css/nodessr/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodessr/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/nodessr/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/nodessr/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/nodessr/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FMQ6KRWLLE"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FMQ6KRWLLE');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar bg-dark ftco-navbar-light" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/"><span>Node SSR</span></a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> Menu
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"><a href="/" class="nav-link">首页</a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link">新闻资讯</a></li>
                                        <li class="nav-item"><a href="#" class="nav-link">关于</a></li>
                    <li class="nav-item"><a href="#" class="nav-link">联系</a></li>
                </ul>
            </div>
        </div>
    </nav>
    <!-- END nav -->
    <section class="hero-wrap hero-wrap-2" style="background-image: url('/assets/website/img/nodessr/bg_5.jpg');" data-stellar-background-ratio="0.5">
        <div class="overlay"></div>
        <div class="container">
            <div class="row no-gutters slider-text align-items-end justify-content-center">
                <div class="col-md-9 ftco-animate mb-5 text-center">
                    <p class="breadcrumbs mb-0">
                        <span class="mr-2"><a href="/">首页 <i class="fa fa-chevron-right"></i></a></span>
                        <span class="mr-2"><a href="/news/">新闻资讯 <i class="fa fa-chevron-right"></i></a></span>
                        <span>正文</span>
                    </p>
                    <h1 class="mb-0 bread">pandas的apply函数常见用法总结</h1>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-section ftco-no-pb ftco-no-pt py-5">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <p>pandas的apply函数通常用于一些复杂的遍历操作（遍历可迭代对象的同时执行一些自定义函数），它的可定制程度高，而且比itterrows、for等操作效率更高，是我非常喜欢而且常用的一个函数。apply的主要参数和对应说明可以查看官网（里面已经说得很详细）<br /><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html"  rel="nofollow">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html</a></p> </h1> <h2> <a id="DataFrame_5" rel="nofollow"></a>对DataFrame的每一行执行一些复杂的操作</h2> <p>举一个例子，计算DataFrame中每一条数据中两个人的轨迹相似度，因为和业务相关，里面的子函数不能透露，这里重点呈现apply的用法。</p> <pre><code>import numpy as np   def calculate_trajectory_similarity(df, trail_dict): 	"""  	:param trail_dict:  	:param df:  	:return:  	""" 	body_threshold = 2 	similarity_threshold = 0.6 	insert_columns = [ 		'trajectory_similarity', 	] 	for c in insert_columns: 		try: 			#  			df.insert(df.shape[1], c, 0) 		except ValueError as v: 			#  			print(str(v)) 	 	def calc_trajectory_similarity(element): 		"""计算XXX""" 		trail01 = trail_dict.get(element['record_id1']) 		trail02 = trail_dict.get(element['record_id2']) 		trail_arr1 = np.array(trail01) 		trail_arr2 = np.array(trail02) 		face_trail01 = trail_arr1[trail_arr1[:, -1] == 'face'] 		body_trail01 = trail_arr1[trail_arr1[:, -1] == 'body'] 		face_trail02 = trail_arr2[trail_arr2[:, -1] == 'face'] 		body_trail02 = trail_arr2[trail_arr2[:, -1] == 'body'] 		sub_trail_list = [ 			(face_trail01, face_trail02), 			(face_trail01, body_trail02), 			(body_trail01, face_trail02), 			(body_trail01, body_trail02) 		] 		#  		avg_body_width = (element['body_width1'] + element['body_width2']) / 2 		tr_similarity_list = [] 		for s in sub_trail_list: 			coordinate_arr1, coordinate_arr2, time_overlap = get_real_time_coordinates(s[0], s[1]) 			if time_overlap &gt; 0: 				sub_similarity = trajectory_similarity(coordinate_arr1, coordinate_arr2, avg_body_width, body_threshold, 				                                       similarity_threshold) 			else: 				sub_similarity = 0 			tr_similarity_list.append((min(len(coordinate_arr1), len(coordinate_arr2)), sub_similarity)) 		if len(tr_similarity_list) &gt; 0: 			weights = [i[0] for i in tr_similarity_list] 			if np.sum(weights) &gt; 0:  #  				tr_similarity = np.sum([w * s for w, s in tr_similarity_list]) / np.sum(weights) 			else: 				tr_similarity = 0 		else: 			tr_similarity = 0 		element['trajectory_similarity'] = tr_similarity 		return element 	 	df = df.apply(calc_trajectory_similarity, axis=1) 	return df </code></pre> <p>里面最核心的操作是<code>df = df.apply(calc_trajectory_similarity, axis=1)</code>，这行代码通过apply调用了calc_trajectory_similarity这个函数，并按照行遍历DataFrame，利用每一行（Series对象）的一些字段信息，计算出轨迹相似度，并存储到DataFrame中。<code>get_real_time_coordinates</code>和<code>trajectory_similarity</code>分别是统计实时点和计算轨迹相似度的自定义函数，在这里可以不用关注。</p> <h2> <a id="Series_73" rel="nofollow"></a>对Series的每一个元素执行一些复杂操作</h2> <p>举个例子，现有一些原始的轨迹数据，需要进行预处理，可以针对需要处理的DataFrame字段(Series格式)单独进行操作。</p> <pre><code>import re   def split_to_int(element): 	"""XXX""" 	if element: 		return list(map(int, re.findall(r"[\d]+", element))) 	else: 		element = [] 		return element   def split_to_list(element): 	"""XXX""" 	if element: 		element = list(re.findall(r"[\d]+", element)) 		element = list(map(convert_time, element)) 		return element 	else: 		element = [] 		return element   def trail_string_processing(df): 	""" 	 	:param df: 	:return: 	""" 	#  	pd.set_option('mode.chained_assignment', None) 	trail_name = [ 		'trail_left_top_x', 		'trail_left_top_y', 		'trail_right_btm_x', 		'trail_right_btm_y', 	] 	for t in trail_name: 		df.loc[:, t] = df[t].apply(split_to_int) 	return df   def time_string_processing(df): 	""" 	XXX 	:param df: 	:return:  	""" 	# XXX 	pd.set_option('mode.chained_assignment', None) 	df.loc[:, 'trail_point_time'] = df['trail_point_time'].apply(split_to_list) 	#  	df.loc[:, 'shot_time'] = df['shot_time'].apply( 		lambda x: x.tz_convert('Asia/Shanghai').tz_localize(None) if x.tz else x) 	return df </code></pre> <p>在上面的代码中，每一个apply都是针对series执行的操作，apply里面的函数可以是自定义函数，也可以是lambda匿名函数。</p> <h2> <a id="GroupBy_133" rel="nofollow"></a>对GroupBy对象执行一些复杂操作</h2> <p>举个例子，现有一个DataFrame需要按照某些字段进行分组，然后对分组后的对象执行一些操作，然后重构为新的DataFrame，这时可以通过apply来实现。</p> <pre><code>import pandas as pd   def merge_key_person_info(df): 	""" 	XXXX 	:param df:  	:return: 	""" 	 	def group_by_key_person(element): 		element = element.drop_duplicates(subset=['pvid', 'rel_pvid']) 		#  		key_person_code = element['key_person_code'].iloc[0] 		if key_person_code == 'tag_is_family': 			max_members_num = 6 		else: 			max_members_num = 11 		key_person_num = len(element['pvid'].iloc[0].split(',')) 		num_k = max_members_num - key_person_num 		num_k = num_k if num_k &gt; 1 else 1 		element = element.sort_values(by=['relation_score'], ascending=False).iloc[:num_k, :] 		#  		key_person_score = list(set(element['key_person_score'].values)) 		rel_pvid_list = list(element['rel_pvid'].values) 		relation_code_list = list(element['relation_code'].values) 		relation_score_list = list(element['relation_score'].values) 		start_time_list = list(element['relation_info_start_time'].values) 		end_time_list = list(element['relation_info_end_time'].values) 		series_dict = { 			'pvid': element['pvid'].iloc[0], 			'corp_id': element['corp_id'].iloc[0], 			'key_person_code': element['key_person_code'].iloc[0], 			'key_person_score': key_person_score, 			'rel_pvid': rel_pvid_list, 			'relation_code': relation_code_list, 			'relation_score': relation_score_list, 			'relation_info_start_time': start_time_list, 			'relation_info_end_time': end_time_list 		} 		result = pd.Series(series_dict) 		return result 	 	#  	group_by_obj = df.groupby(by=['pvid', 'corp_id', 'key_person_code']) 	group_df = group_by_obj.apply(group_by_key_person).reset_index(drop=True) 	return group_df </code></pre> </h1> <p>有时候为了提升效率，一些涉及到大量数值计算的apply可以使用numpy的.apply_along_axis替代。</p> <pre><code>def calculate_speed_and_angle_similarity(parameters_df):     """          :param parameters_df:      :return:      """     try:         #          parameters_df.insert(parameters_df.shape[1], 'angle_similarity', 0)         parameters_df.insert(parameters_df.shape[1], 'speed_similarity', 0)     except ValueError as v:         #         logger = my_logger()         logger.info(str(v))      def calc_angle_speed_similarity(element):         """XXXX"""         angle1 = element[35]         angle2 = element[83]          moving_speed1 = element[43]         moving_speed2 = element[91]          #          angle_difference = abs(angle1 - angle2)         if angle_difference &gt;= 90:  #              angle_similarity = 0         else:             angle_similarity = np.cos(abs(angle1 - angle2) / 180 * np.pi)         element[102] = angle_similarity          #          slower_speed = min(moving_speed1, moving_speed2)         faster_speed = max(moving_speed1, moving_speed2)         speed_similarity = slower_speed / faster_speed         element[103] = speed_similarity         return element      arr = parameters_df.values     new_arr = np.apply_along_axis(calc_angle_speed_similarity, axis=1, arr=arr)     parameters_df = pd.DataFrame(new_arr, columns=parameters_df.columns)     return parameters_df </code></pre> <p>按照上述写法，虽然可以在一定程度上提升运行速度，但由于ndarray不支持字符串索引，对字段的操作只能按照序号来进行，很容易出错，代码可读性也比较差，不太推荐在复杂函数中使用，简单的计算用np.apply_along_axis会比较适合。</p> <p>上面的代码都是一些模块的片段，只是用来展示apply的用法，因此无法跑通，请多包涵。为了信息安全，所有注释和细节代码都删除了。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-43634.htm">扫一扫识别猫品种图片（扫一扫的识别方式）</a></p>
                                        <p>下一个：<a href="/news/article-44642.htm">北京农业大学动物医院电话地址是多少（北京农业大学动物医院电话地址是多少啊）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-25837.htm" title="宠物用品货源网站大全（宠物用品货源都从哪里来）">宠物用品货源网站大全（宠物用品货源都从哪里来）</a></li>
                        <li class="py-2"><a href="/news/article-45614.htm" title="动物疫苗在哪买比较好呢（动物疫苗在哪里买）">动物疫苗在哪买比较好呢（动物疫苗在哪里买）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-17-node-share.htm" title="「11月17日」最高速度22.4M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费机场订阅节点链接">「11月17日」最高速度22.4M/S，2024年V2ray/Shadowrocket/SSR/Clash每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-22-free-subscribe-node.htm" title="「10月22日」最高速度23M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费机场订阅节点链接">「10月22日」最高速度23M/S，2024年Clash/Shadowrocket/SSR/V2ray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-7-free-subscribe-node.htm" title="「11月7日」最高速度20.2M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费机场订阅节点链接">「11月7日」最高速度20.2M/S，2024年V2ray/Clash/Shadowrocket/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-21-free-node-subscribe-links.htm" title="「1月21日」最高速度18.2M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费机场订阅节点链接">「1月21日」最高速度18.2M/S，2025年V2ray/SSR/Clash/Shadowrocket每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-30989.htm" title="动物救援中心 上海动物救援中心">动物救援中心 上海动物救援中心</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-14-free-ssr-subscribe.htm" title="「11月14日」最高速度21M/S，2024年Clash/V2ray/Shadowrocket/SSR每天更新免费机场订阅节点链接">「11月14日」最高速度21M/S，2024年Clash/V2ray/Shadowrocket/SSR每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-3-node-share.htm" title="「1月3日」最高速度19.4M/S，2025年Shadowrocket/SSR/Clash/V2ray每天更新免费机场订阅节点链接">「1月3日」最高速度19.4M/S，2025年Shadowrocket/SSR/Clash/V2ray每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-29996.htm" title="成都宠物领养中心有哪些地方可以领养（成都宠物领养中心免费）">成都宠物领养中心有哪些地方可以领养（成都宠物领养中心免费）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">70</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer">
        <div class="container-fluid px-0 py-5 bg-black">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <p class="mb-0" style="color: rgba(255,255,255,.5);">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        Node SSR节点订阅官网 版权所有
                        <br />
                        Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg>
    </div>
    <script src="/assets/website/js/frontend/nodessr/jquery-3.5.1.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/popper.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/nodessr/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/nodessr/scrollax.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
    <script src="/assets/website/js/frontend/nodessr/google-map.js"></script>
    <script src="/assets/website/js/frontend/nodessr/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>